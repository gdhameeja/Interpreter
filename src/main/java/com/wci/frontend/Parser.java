package com.wci.frontend;

import com.wci.intermediate.SymTab;
import com.wci.intermediate.ICode;
import com.wci.message.*;
import com.wci.frontend.*;
/**
 * <h1> Parser </h1>
 * <p> A language independent class. The implementation will be provided by langage
 * specific subclasses.
 */

public abstract class Parser implements MessageProducer{
    protected Scanner scanner;  // particular scanner used by a parser
    protected static SymTab symTab;    // Symbol table generated by this parser
    protected static ICode iCode;      // Intermediate code generated by this parser
    protected static MessageHandler messageHandler;
    static{
        symTab = null;          // initializes symTab once before any Parser objects are created
        messageHandler = new MessageHandler();
    }

    /**
     * Constructor
     * @param scanner the scanner to be used with this parser
     */
    protected Parser(Scanner scanner){
        this.scanner = scanner;
        this.iCode = null;
    }

    /**
     * Parse a source program to generate Intermediate Code and symbol table.
     * To be implemented by language specific subclass. Throws exception on error.
     */
    public abstract void parse() throws Exception;

    /**
     * Return number of syntax errors found by the parser. 
     * To be implemented by language specific subclasses. Throws exception on error.
     */
    public abstract int getErrorCount() throws Exception;

    /**
     * Call the scanner's currentToken() method.
     * @return the current token
     */
    public Token currentToken(){
        return scanner.currentToken();
    }

    /**
     * Call the scanner's nextToken method
     * @return the next token
     * @throws Exception if an error occurred.
     */
    public Token nextToken()throws Exception{
        return scanner.nextToken();
    }

    /**
     * Add a parser message listener.
     * @param listener the message listener to add.
     */
    public void addMessageListener(MessageListener listener){
        messageHandler.addListener(listener);
    }

    /**
     * Remove a parser message listener.
     * @param listener the message listener to remove.
     */
    public void removeMessageListener(MessageListener listener){
        messageHandler.removeListener(listener);
    }

    /**
     * Notify listeners after setting the message.
     * @param message the message to send.
     */
    public void sendMessage(Message message){
        messageHandler.sendMessage(message);
    }

    public static SymTab getSymTab() {
        return symTab;
    }

    public static void setSymTab(SymTab symTab) {
        Parser.symTab = symTab;
    }

    public static ICode getiCode() {
        return iCode;
    }

    public static void setiCode(ICode iCode) {
        Parser.iCode = iCode;
    }
}
