package wci.backend;

/**
 * <h1> Backend </h1>
 * <p> The framework class that represents the backend component. </p>
 */

public abstract class Backend implements MessageProducer{
    protected static MessageHandler messageHandler;   // Message handler delegate.
    static{
	messageHandler = new MessageHandler();
    }
    protected ICode icode;   // intermediate code
    protected SymTab symTab;  // symbol table

    /**
     * Add a listener to the listener list.
     * @param listener the listener to add.
     */
    public void addMessageListener(MessageListener listener){
	messageHandler.addListener(listener);
    }

    /**
     * Remove a listener from the listener list.
     * @param listener the listener to remove.
     */
    public void removeMessageListener(MessageListener listener){
	messageHandler.removeListener(listener);
    }

    /**
     * Notify listeners after setting the message.
     * @param message the message to send. 
     */
    public void sendMessage(Message message){
	messageHandler.sendMessage(message);
    }

    /**
     * Process the intermediate code and symbol table generated by the parser. To be implemented by
     * a compiler or an interpreter subclass.
     * @param iCode the intermediate code.
     * @param symTab the symbol table.
     * @throws Exception if error occurred.
     */
    public abstract void process(ICode iCode, SymTab symTab) throws Exception;
}
